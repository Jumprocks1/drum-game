using System.Collections.Generic;
using System.ComponentModel;
using DrumGame.Game.Utils;
using Newtonsoft.Json;
using osu.Framework.Graphics;
using osu.Framework.Graphics.Shaders;
using osu.Framework.Graphics.Textures;
using osu.Framework.IO.Stores;

namespace DrumGame.Game.Skinning;

public class Skin
{
    [Description("Can be a semver range for more warnings/compatibility hints")]
    public string GameVersion;
    public string SkinVersion;
    public string Name;
    public string Description;
    public string Comments;
    public class Skin_HitColors
    {
        public Colour4 EarlyMiss;
        public Colour4 LateMiss;
        [Description("Color associated with a <miss>miss</c>.\nAlso has late and early variants which are automatically generated by default.")]
        public Colour4 Miss = new(178, 12, 12, 255);

        public Colour4 EarlyBad;
        public Colour4 LateBad;
        [Description("Color associated with a <bad>bad</c> hit.\nAlso has late and early variants which are automatically generated by default.")]
        public Colour4 Bad = Colour4.DarkOrange;

        public Colour4 EarlyGood;
        public Colour4 LateGood;
        [Description("Color associated with a <good>good</c> hit.\nAlso has late and early variants which are automatically generated by default.")]
        public Colour4 Good = Colour4.LawnGreen;

        public Colour4 EarlyPerfect;
        public Colour4 LatePerfect;
        [Description("Color associated with a <perfect>perfect</c> hit.\nAlso has late and early variants which are automatically generated by default.")]
        public Colour4 Perfect = Colour4.DeepSkyBlue;

        public const float DefaultShadeAmount = 0.4f;

        public void LoadDefaults()
        {
            if (EarlyMiss == default) EarlyMiss = Miss.Darken(DefaultShadeAmount);
            if (LateMiss == default) LateMiss = Miss.Lighten(DefaultShadeAmount);

            if (EarlyBad == default) EarlyBad = Bad.Darken(DefaultShadeAmount);
            if (LateBad == default) LateBad = Bad.Lighten(DefaultShadeAmount);

            if (EarlyGood == default) EarlyGood = Good.Darken(DefaultShadeAmount);
            if (LateGood == default) LateGood = Good.Lighten(DefaultShadeAmount);

            if (EarlyPerfect == default) EarlyPerfect = Perfect;
            if (LatePerfect == default) LatePerfect = Perfect;
        }
        public Skin_HitColors Clone() => (Skin_HitColors)MemberwiseClone();
    }
    public Skin_HitColors HitColors = new();
    public AdjustableSkinData KeyPressOverlay;

    public NotationSkinInfo Notation = new();
    public ManiaSkinInfo Mania = new();

    public void LoadDefaults()
    {
        HitColors.LoadDefaults();
        Notation.LoadDefaults();
        Mania.LoadDefaults();
        KeyPressOverlay?.LoadDefaults();
    }

    [JsonIgnore] public string Source;
    [JsonIgnore] public string SourceFolder;
    [JsonIgnore] public IResourceStore<TextureUpload> LoaderStore;
    [JsonIgnore] public ShaderManager ShaderManager;
    [JsonIgnore] public List<string> DirtyPaths;
    [JsonIgnore] public bool Dirty => DirtyPaths != null && DirtyPaths.Count > 0;
    public void AddDirtyPath(string path)
    {
        DirtyPaths ??= new();
        if (!DirtyPaths.Contains(path))
            DirtyPaths.Add(path);
        // if a parent path is already dirty, child paths don't need to be included
        for (var i = DirtyPaths.Count - 1; i >= 0; i--)
        {
            for (var j = 0; j < DirtyPaths.Count; j++)
            {
                if (j != i && DirtyPaths[i].StartsWith(DirtyPaths[j] + '.'))
                {
                    DirtyPaths.RemoveAt(i);
                    break;
                }
            }
        }
    }
    public void UnloadStores()
    {
        if (LoaderStore != null)
        {
            Util.Resources.LinearAssetTextureStore.RemoveTextureStore(LoaderStore);
            Util.Resources.NearestAssetTextureStore.RemoveTextureStore(LoaderStore);
        }
        if (ShaderManager != null)
        {
            ShaderManager.Dispose();
            ShaderManager = null;
        }
    }
    public void LoadStores()
    {
        if (SourceFolder != null)
        {
            var assetStore = new StorageBackedResourceStore(Util.Resources.Storage.GetStorageForDirectory(SourceFolder));
            LoaderStore = Util.Host.CreateTextureLoaderStore(assetStore);

            var shaderStore = new ResourceStore<byte[]>();
            shaderStore.AddStore(new NamespacedResourceStore<byte[]>(Util.DrumGame.Resources, @"Shaders"));
            shaderStore.AddStore(assetStore);

            ShaderManager = new ShaderManager(Util.Host.Renderer, shaderStore);
            Util.Resources.LinearAssetTextureStore.AddTextureSource(LoaderStore);
            Util.Resources.NearestAssetTextureStore.AddTextureSource(LoaderStore);
        }
    }
}